\begin{thebibliography}{10}

\bibitem{ahmed2012assessment}
Ikhlaaq Ahmed, Alexander~J Sutton, and Richard~D Riley.
\newblock Assessment of publication bias, selection bias, and unavailable data
  in meta-analyses using individual participant data: a database survey.
\newblock {\em British Medical Journal}, 344:d7762, 2012.

\bibitem{NonAdeq}
Mohammad~Amin Alipour, August Shi, Rahul Gopinath, Darko Marinov, and Alex
  Groce.
\newblock Evaluating non-adequate test-case reduction.
\newblock In {\em Proceedings of the 31st {IEEE/ACM} International Conference
  on Automated Software Engineering, {ASE} 2016, Singapore, September 3-7,
  2016}, pages 16--26, 2016.

\bibitem{AndrewsTR}
Jamie Andrews, Yihao~Ross Zhang, and Alex Groce.
\newblock Comparing automated unit testing strategies.
\newblock Technical Report 736, Department of Computer Science, University of
  Western Ontario, December 2010.

\bibitem{bell2018d}
Jonathan Bell, Owolabi Legunsen, Michael Hilton, Lamyaa Eloussi, Tifany Yung,
  and Darko Marinov.
\newblock {DeFlaker:} automatically detecting flaky tests.
\newblock In {\em Proceedings of the 40th International Conference on Software
  Engineering}, pages 433--444. ACM, 2018.

\bibitem{datarray}
{Berkeley Institute for Data Science}.
\newblock Prototyping numpy arrays with named axes for data management.
\newblock \url{https://github.com/BIDS/datarray}.

\bibitem{ParallelDeterministic}
Robert~L. Bocchino, Jr., Vikram~S. Adve, Sarita~V. Adve, and Marc Snir.
\newblock Parallel programming must be deterministic by default.
\newblock In {\em Proceedings of the First USENIX Conference on Hot Topics in
  Parallelism}, HotPar'09, pages 4--4, Berkeley, CA, USA, 2009. USENIX
  Association.

\bibitem{ClaessenH00}
Koen Claessen and John Hughes.
\newblock {QuickCheck}: a lightweight tool for random testing of haskell
  programs.
\newblock In {\em ICFP}, pages 268--279, 2000.

\bibitem{FaultTriggers}
D.~Cotroneo, M.~Grottke, R.~Natella, R.~Pietrantuono, and K.~S. Trivedi.
\newblock Fault triggers in open-source software: An experience report.
\newblock In {\em International Symposium on Software Reliability Engineering},
  pages 178--187, 2013.

\bibitem{CompBugs}
Domenico Cotroneo, Roberto Pietrantuono, Stefano Russo, and Kishor Trivedi.
\newblock How do bugs surface? a comprehensive study on the characteristics of
  software bugs manifestation.
\newblock {\em Journal of Systems and Software}, 113(C):27--43, March 2016.

\bibitem{shader}
Alastair~F. Donaldson, Hugues Evrard, Andrei Lascu, and Paul Thomson.
\newblock Automated testing of graphics shader compilers.
\newblock {\em {PACMPL}}, 1({OOPSLA}):93:1--93:29, 2017.

\bibitem{Unknowns}
Sebastian Elbaum and David~S. Rosenblum.
\newblock Known unknowns: Testing in the presence of uncertainty.
\newblock In {\em ACM SIGSOFT International Symposium on Foundations of
  Software Engineering}, pages 833--836, 2014.

\bibitem{Firesmith}
Donald Firesmith.
\newblock The challenges of testing in a non-deterministic world.
\newblock
  \url{https://insights.sei.cmu.edu/sei_blog/2017/01/the-challenges-of-testing-in-a-non-deterministic-world.html},
  January 2017.

\bibitem{Gao:2015:MSU:2818754.2818764}
Zebao Gao, Yalan Liang, Myra~B. Cohen, Atif~M. Memon, and Zhen Wang.
\newblock Making system user interactive tests repeatable: When and what should
  we control?
\newblock In {\em International Conference on Software Engineering}, ICSE '15,
  pages 55--65. IEEE, 2015.

\bibitem{GarlanUncertain}
David Garlan.
\newblock Software engineering in an uncertain world.
\newblock In {\em Proceedings of the FSE/SDP Workshop on Future of Software
  Engineering Research}, pages 125--128, 2010.

\bibitem{DeepStateTutorial}
Peter Goodman, Gustavo Greico, and Alex Groce.
\newblock Tutorial: {DeepState}: Bringing vulnerability detection tools into
  the development cycle.
\newblock In {\em IEEE Cybersecurity Development Conference (SECDEV)}, 2018.

\bibitem{DeepState}
Peter Goodman and Alex Groce.
\newblock {DeepState}: Symbolic unit testing for {C} and {C++}.
\newblock In {\em NDSS Workshop on Binary Analysis Research}, 2018.

\bibitem{Heisenbug}
Jim Gray.
\newblock Why do computers stop and what can be done about it?
\newblock In {\em Symposium on reliability in distributed software and database
  systems}, pages 3--12, 1986.

\bibitem{stvrcausereduce}
Alex Groce, Mohammad~Amin Alipour, Chaoqiang Zhang, Yang Chen, and John Regehr.
\newblock Cause reduction: Delta-debugging, even without bugs.
\newblock {\em Journal of Software Testing, Verification, and Reliability}.
\newblock accepted for publication.

\bibitem{icst2014}
Alex Groce, Mohammad~Amin Alipour, Chaoqiang Zhang, Yang Chen, and John Regehr.
\newblock Cause reduction for quick testing.
\newblock In {\em International Conference on Software Testing, Verification
  and Validation}, pages 243--252, 2014.

\bibitem{Composition}
Alex Groce, Paul Flikkema, and Josie Holmes.
\newblock Towards automated composition of heterogeneous tests for
  cyber-physical systems.
\newblock In {\em Proceedings of the 1st ACM SIGSOFT International Workshop on
  Testing Embedded and Cyber-Physical Systems}, TECPS 2017, pages 12--15, New
  York, NY, USA, 2017. ACM.

\bibitem{AMAI}
Alex Groce, Klaus Havelund, Gerard Holzmann, Rajeev Joshi, and Ru-Gang Xu.
\newblock Establishing flight software reliability: Testing, model checking,
  constraint-solving, monitoring and learning.
\newblock {\em Annals of Mathematics and Artificial Intelligence},
  70(4):315--349, 2014.

\bibitem{onetest}
Alex Groce, Josie Holmes, and Kevin Kellar.
\newblock One test to rule them all.
\newblock In {\em International Symposium on Software Testing and Analysis},
  2017.
\newblock accepted for publication.

\bibitem{RegExpMut}
Alex Groce, Josie Holmes, Darko Marinov, August Shi, and Lingming Zhang.
\newblock An extensible, regular-expression-based tool for multi-language
  mutant generation.
\newblock In {\em International Conference on Software Engineering: Companion
  Proceeedings}, pages 25--28, 2018.

\bibitem{ICSEDiff}
Alex Groce, Gerard Holzmann, and Rajeev Joshi.
\newblock Randomized differential testing as a prelude to formal verification.
\newblock In {\em International Conference on Software Engineering}, pages
  621--631, 2007.

\bibitem{CFV08}
Alex Groce, Gerard Holzmann, Rajeev Joshi, and Ru-Gang Xu.
\newblock Putting flight software through the paces with testing, model
  checking, and constraint-solving.
\newblock In {\em Workshop on Constraints in Formal Verification}, pages 1--15,
  2008.

\bibitem{NFM15}
Alex Groce and Jervis Pinto.
\newblock A little language for testing.
\newblock In {\em NASA Formal Methods Symposium}, pages 204--218, 2015.

\bibitem{ISSTA15}
Alex Groce, Jervis Pinto, Pooria Azimi, and Pranjal Mittal.
\newblock {TSTL}: a language and tool for testing (demo).
\newblock In {\em ACM International Symposium on Software Testing and
  Analysis}, pages 414--417, 2015.

\bibitem{tstl}
Alex Groce, Jervis Pinto, Pooria Azimi, Pranjal Mittal, Josie Holmes, and Kevin
  Kellar.
\newblock {TSTL}: the template scripting testing language.
\newblock \url{https://github.com/agroce/tstl}.

\bibitem{GrottkeBugs}
M.~Grottke and K.~S. Trivedi.
\newblock Fighting bugs: remove, retry, replicate, and rejuvenate.
\newblock {\em {IEEE} Computer}, 40(2):107--109, 2007.

\bibitem{StartupstoScaleups}
Mark Harman and Peter O'Hearn.
\newblock From start-ups to scale-ups: Opportunities and open problems for
  static and dynamic program analysis.
\newblock In {\em IEEE International Working Conference on Source Code Analysis
  and Manipulation}, 2018.

\bibitem{tstlsttt}
Josie Holmes, Alex Groce, Jervis Pinto, Pranjal Mittal, Pooria Azimi, Kevin
  Kellar, and James O'Brien.
\newblock {TSTL:} the template scripting testing language.
\newblock {\em International Journal on Software Tools for Technology
  Transfer}, 20(1):57--78, 2018.

\bibitem{Transient}
P.~Jalote, Y.~Huang, and C.~Kintala.
\newblock A framework for understanding and handling transient software
  failures.
\newblock In {\em International Symposium on Software Testing and Analysis},
  1995.

\bibitem{idflakies}
Wing Lam, Reed Oei, August Shi, Darko Marinov, and Tao Xie.
\newblock {iDFlakies:} a framework for detecting and partially classifying
  flaky tests.
\newblock In {\em {IEEE} International Conference on Software Testing,
  Verification and Validation}, 2019.

\bibitem{LamZE2015}
Wing Lam, Sai Zhang, and Michael~D. Ernst.
\newblock When tests collide: Evaluating and coping with the impact of test
  dependence.
\newblock Technical Report UW-CSE-15-03-01, University of Washington Department
  of Computer Science and Engineering, Seattle, WA, USA, March 2015.

\bibitem{listfieldtestanalysis}
Jeff Listfield.
\newblock Where do our flaky tests come from?
\newblock
  \url{https://testing.googleblog.com/2017/04/where-do-our-flaky-tests-come-from.html},
  April 2017.

\bibitem{applebug2}
Roman Loyala.
\newblock macos high sierra 'root' security issue allows admin access.
\newblock
  \url{https://www.macworld.com/article/3238868/macs/macos-high-sierra-root-security-issue-allows-admin-access}.

\bibitem{lu2015roundtable}
Jian Lu, David~S Rosenblum, Tevfik Bultan, Valerie Issarny, Schahram Dustdar,
  Margaret-Anne Storey, and Dongmei Zhang.
\newblock Roundtable: the future of software engineering for internet
  computing.
\newblock {\em IEEE Software}, 32(1):91--97, 2015.

\bibitem{luo2014empirical}
Qingzhou Luo, Farah Hariri, Lamyaa Eloussi, and Darko Marinov.
\newblock An empirical analysis of flaky tests.
\newblock In {\em ACM SIGSOFT International Symposium on Foundations of
  Software Engineering}, pages 643--653. ACM, 2014.

\bibitem{Hypothesis}
David~R. MacIver.
\newblock Hypothesis: Test faster, fix more.
\newblock \url{http://hypothesis.works/}, March 2013.

\bibitem{ASLR}
Hector Marco-Gisbert and Ismael Ripoll.
\newblock On the effectiveness of full-aslr on 64-bit linux, 2014.

\bibitem{redispy}
Andy McCurdy.
\newblock redis-py: {Python Redis Client}.
\newblock \url{https://github.com/andymccurdy/redis-py}.

\bibitem{pyfakefs}
John McGehee.
\newblock pyfakefs implements a fake file system that mocks the python file
  system modules.
\newblock \url{https://github.com/jmcgeheeiv/pyfakefs}.

\bibitem{Differential}
William McKeeman.
\newblock Differential testing for software.
\newblock {\em Digital Technical Journal of Digital Equipment Corporation},
  10(1):100--107, 1998.

\bibitem{memon2017taming}
Atif Memon, Zebao Gao, Bao Nguyen, Sanjeev Dhanda, Eric Nickell, Rob
  Siemborski, and John Micco.
\newblock Taming {Google}-scale continuous testing.
\newblock In {\em International Conference on Software Engineering}, pages
  233--242. IEEE, 2017.

\bibitem{miccoflaky}
John Micco.
\newblock Flaky tests at {Google} and how we mitigate them.
\newblock
  \url{https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html},
  May 2016.

\bibitem{applebug1}
Shaun Nichols.
\newblock As apple fixes macos root password hole, here's what went wrong.
\newblock
  \url{https://www.theregister.co.uk/2017/11/29/apple_macos_high_sierra_root_bug_patch/}.

\bibitem{applebug0}
{NIST}.
\newblock Cve-2017-13872.
\newblock \url{https://nvd.nist.gov/vuln/detail/CVE-2017-13872}.

\bibitem{denial}
{Open Source Computer Security Incident Response Team}.
\newblock ocert-2011-003 multiple implementations denial-of-service via hash
  algorithm collision.
\newblock \url{http://ocert.org/advisories/ocert-2011-003.html}.

\bibitem{Pacheco}
Carlos Pacheco, Shuvendu~K. Lahiri, Michael~D. Ernst, and Thomas Ball.
\newblock Feedback-directed random test generation.
\newblock In {\em International Conference on Software Engineering}, pages
  75--84, 2007.

\bibitem{palomba2017does}
Fabio Palomba and Andy Zaidman.
\newblock Does refactoring of test smells induce fixing flaky tests?
\newblock In {\em IEEE International Conference on Software Maintenance and
  Evolution}. IEEE, 2017.

\bibitem{Papadakis:2011:PIT:2034654.2034663}
Manolis Papadakis and Konstantinos Sagonas.
\newblock A proper integration of types and function specifications with
  property-based testing.
\newblock In {\em Proceedings of the 10th ACM SIGPLAN Workshop on Erlang},
  Erlang '11, pages 39--50, New York, NY, USA, 2011. ACM.

\bibitem{redis}
redislabs.
\newblock Redis.
\newblock \url{https://redis.io/}.

\bibitem{CReduce}
John Regehr, Yang Chen, Pascal Cuoq, Eric Eide, Chucky Ellison, and Xuejun
  Yang.
\newblock Test-case reduction for {C} compiler bugs.
\newblock In {\em Programming Language Design and Implementation}, pages
  335--346, 2012.

\bibitem{FileProp}
Cindy Rubio{-}Gonz{\'{a}}lez, Haryadi~S. Gunawi, Ben Liblit, Remzi~H.
  Arpaci{-}Dusseau, and Andrea~C. Arpaci{-}Dusseau.
\newblock Error propagation analysis for file systems.
\newblock In {\em Proceedings of the 2009 {ACM} {SIGPLAN} Conference on
  Programming Language Design and Implementation, {PLDI} 2009, Dublin, Ireland,
  June 15-21, 2009}, pages 270--280, 2009.

\bibitem{russell2016artificial}
Stuart~J Russell and Peter Norvig.
\newblock {\em Artificial intelligence: a modern approach}.
\newblock Malaysia; Pearson Education Limited, 2016.

\bibitem{DetermImp}
A.~Shi, A.~Gyori, O.~Legunsen, and D.~Marinov.
\newblock Detecting assumptions on deterministic implementations of
  non-deterministic specifications.
\newblock In {\em 2016 IEEE International Conference on Software Testing,
  Verification and Validation (ICST)}, pages 80--90, April 2016.

\bibitem{deepstaterepo}
{Trail of Bits}.
\newblock {DeepState}: A unit test-like interface for fuzzing and symbolic
  execution.
\newblock \url{https://github.com/trailofbits/deepstate}, 2018.

\bibitem{csmith}
Xuejun Yang, Yang Chen, Eric Eide, and John Regehr.
\newblock Finding and understanding bugs in {C} compilers.
\newblock In {\em Programming Language Design and Implementation}, pages
  283--294, 2011.

\bibitem{aflfuzz}
Michal Zalewski.
\newblock american fuzzy lop (2.35b).
\newblock \url{http://lcamtuf.coredump.cx/afl/}.
\newblock Accessed December 20, 2016.

\bibitem{DD}
Andreas Zeller and Ralf Hildebrandt.
\newblock Simplifying and isolating failure-inducing input.
\newblock {\em Software Engineering, IEEE Transactions on}, 28(2):183--200,
  2002.

\bibitem{UncertaintyPrinciple}
Hadar Ziv and Debra Richardson.
\newblock The uncertainty principle in software engineering.
\newblock In {\em International Conference on Software Engineering}, 1997.

\end{thebibliography}
